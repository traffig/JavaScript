"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Cart =
/*#__PURE__*/
function () {
  function Cart(t) {
    var a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#cart";

    _classCallCheck(this, Cart);

    this.source = t, this.container = a, this.countGoods = 0, this.amount = 0, this.cartItems = [], this._init();
  }

  _createClass(Cart, [{
    key: "_init",
    value: function _init() {
      var _this = this;

      this._render(), fetch(this.source).then(function (t) {
        return t.json();
      }).then(function (t) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = t.contents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var a = _step.value;
            _this.cartItems.push(a), _this._renderItem(a);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        _this.countGoods = t.countGoods, _this.amount = t.amount, _this._renderSum();
      });
    }
  }, {
    key: "_render",
    value: function _render() {
      var t = $("<div/>", {
        class: "cart-drop"
      }),
          a = $("<div/>", {
        class: "cart-items"
      }),
          s = $("<div/>", {
        class: "cart-countGoods"
      }),
          e = $("<div/>", {
        class: "cart-total"
      }),
          c = $("<a/>", {
        class: "cart-checkout",
        href: "checkout.html",
        text: "checkout"
      }),
          i = $("<a/>", {
        class: "cart-goToCart",
        href: "shopping_cart.html",
        text: "go to cart"
      });
      s.append($('<span class="sum-goods">0</span>')), e.append($('<span>total</span><span class="sum-price">$0</span>')), s.appendTo($(this.container)), a.appendTo(t), e.appendTo(t), c.appendTo(t), i.appendTo(t), t.appendTo($(this.container));
    }
  }, {
    key: "_renderItem",
    value: function _renderItem(t) {
      var _this2 = this;

      var a = $("<div/>", {
        class: "cart-item",
        "data-product": t.id_product
      }),
          s = $("<div/>", {
        class: "cart-itemWrapper"
      }),
          e = $("<div/>", {
        class: "cart-text"
      });
      s.append($("<img src=\"".concat(t.src, "\" alt=\"photo\" class=\"cart-img\">"))), e.append($("<p class=\"cart-textName\">".concat(t.product_name, "</p>"))), e.append($("<p class=\"cart-textPrice\">".concat(t.quantity, " x $").concat(t.price, "</p>"))), e.appendTo(s), s.appendTo(a);
      var c = $('<div class="cart-btnRemove-wrapper">\n        <a href="#" class="cart-btnRemove"><i class="fas fa-times-circle"></i></a></div>');
      c.click(function () {
        _this2._remove(t.id_product);
      }), a.append(c), a.appendTo($(".cart-items"));
    }
  }, {
    key: "_renderSum",
    value: function _renderSum() {
      $(".sum-goods").text("".concat(this.countGoods)), $(".sum-price").text("$".concat(this.amount));
    }
  }, {
    key: "_updateCart",
    value: function _updateCart(t) {
      $("div[data-product=\"".concat(t.id_product, "\"]")).find(".cart-textPrice").text("".concat(t.quantity, " x $").concat(t.quantity * t.price));
    }
  }, {
    key: "addProduct",
    value: function addProduct(t) {
      var a = +$(t).data("id");

      if (!isNaN(a)) {
        {
          var s = this.cartItems.find(function (t) {
            return t.id_product === a;
          });
          if (s) s.quantity++, this.countGoods++, this.amount += s.price, this._updateCart(s);else {
            var _s = {
              id_product: a,
              product_name: $(t).data("name"),
              price: +$(t).data("price"),
              quantity: 1,
              src: $(t).data("src")
            };
            this.cartItems.push(_s), this._renderItem(_s), this.amount += _s.price, this.countGoods += _s.quantity;
          }
        }

        this._renderSum();
      }
    }
  }, {
    key: "_remove",
    value: function _remove(t) {
      var a = this.cartItems.find(function (a) {
        return a.id_product === t;
      });
      a.quantity > 1 ? (a.quantity--, this._updateCart(a)) : (this.cartItems.splice(this.cartItems.indexOf(a), 1), $("div[data-product=\"".concat(t, "\"]")).remove()), this.countGoods--, this.amount -= a.price, this._renderSum();
    }
  }]);

  return Cart;
}();